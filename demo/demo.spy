# -*- mode: python -*-

from jsffi import init as js_init, get_GlobalThis, get_Console

def main() -> void:
    # initialization
    js_init()
    window = get_GlobalThis()
    console = get_Console()
    document = window.document
    #
    # real code
    console.log("Hello SPy")
    div = document.getElementById("out")
    div.innerText = "Hello HTML from SPy"




# Currently JsRef is implemented as a builtin, but ideally we should be able
# to implement it like this:
#
## class JsRef:
##
##     @staticmethod
##     @blue
##     def __GETATTR__(cls, attr):
##         def opimpl(self: JsRef) -> JsRef:
##             return js_getattr(self, attr)
##         return opimpl
##
##     # equivalent to above, but with syntax sugare
##     @staticmethod
##     def __GETATTR__[cls, attr](self: JsRef) -> JsRef:
##         #            ^    ^     ^
##         #           blue blue  red
##         return js_getattr(self, attr)
