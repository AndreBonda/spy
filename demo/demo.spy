# -*- mode: python -*-

from jsffi import (
    init as js_init,
    debug as js_debug,
    get_GlobalThis,
    get_Console,
    js_string,
    js_call_method_1,
    js_getattr,
    js_setattr)

# Currently JsRef is implemented as a builtin, but ideally we should be able
# to implement it like this:
#
## class JsRef:
##
##     @staticmethod
##     @blue
##     def __GETATTR__(cls, attr):
##         def opimpl(self: JsRef) -> JsRef:
##             return js_getattr(self, attr)
##         return opimpl
##
##     # equivalent to above, but with syntax sugare
##     @staticmethod
##     def __GETATTR__[cls, attr](self: JsRef) -> JsRef:
##         #            ^    ^     ^
##         #           blue blue  red
##         return js_getattr(self, attr)



def demo_lowlevel() -> void:
    js_init()
    js_debug("hello world")
    window = get_GlobalThis()
    console = get_Console()

    js_msg = js_string("hello from SPy")
    js_call_method_1(console, "log", js_msg)

    document = js_getattr(window, "document")
    #js_call_method_1(console, "log", document)

    div = js_call_method_1(
        document,
        "getElementById",
        js_string("out")
    )
    js_call_method_1(console, "log", div)

    js_setattr(
        div,
        "innerText",
        js_string("hello HTML from SPy")
    )

def demo_highlevel() -> void:
    js_init()
    window = get_GlobalThis()
    console = get_Console()
    document = window.document
    #js_call_method_1(console, "log", window.document)
    #console.log(window.document)
    console.log("hello SPy")
    div = document.getElementById("out")
    console.log(div)

def main() -> void:
    #demo_lowlevel()
    demo_highlevel()
