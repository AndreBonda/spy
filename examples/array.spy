from operator import OpSpec, OpArg
from unsafe import gc_alloc, ptr

@blue.generic
def ndarray1(DTYPE):

    @struct
    class ArrayData:
        length: i32
        items: ptr[DTYPE]

    @typelift
    class ndarray:
        __ll__: ptr[ArrayData]

        def __new__(length: i32) -> ndarray:
            data = gc_alloc(ArrayData)(1)
            data.length = length
            data.items = gc_alloc(DTYPE)(length)
            i = 0
            while i < length:
                data.items[i] = 0
                i = i + 1
            return ndarray.__lift__(data)


        @blue
        def __GETITEM__(v_arr: OpArg, v_i: OpArg) -> OpSpec:

            def getitem(arr: ndarray, i: i32) -> DTYPE:
                ll = arr.__ll__
                if i >= ll.length:
                    raise IndexError
                return ll.items[i]

            return OpSpec(getitem)

    return ndarray

def main() -> None:
    a_floats = ndarray1[f64](10)
    a_ints = ndarray1[i32](4)
    print(a_floats[3])
    print(a_ints[2])
