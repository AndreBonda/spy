from operator import OpSpec, MetaArg
from unsafe import gc_alloc, ptr

@blue.generic
def array2d(DTYPE):

    @struct
    class ArrayData:
        h: i32
        w: i32
        items: ptr[DTYPE]

    @typelift
    class ndarray:
        __ll__: ptr[ArrayData]

        def __new__(h: i32, w: i32) -> ndarray:
            data = gc_alloc(ArrayData)(1)
            data.h = h
            data.w = w
            data.items = gc_alloc(DTYPE)(h*w)
            i = 0
            while i < h*w:
                data.items[i] = 0
                i = i + 1
            return ndarray.__lift__(data)

        @blue
        def __GETITEM__(m_arr: MetaArg, m_i: MetaArg, m_j: MetaArg) -> OpSpec:
            def getitem(arr: ndarray, i: i32, j: i32) -> DTYPE:
                ll = arr.__ll__
                if i >= ll.h:
                    raise IndexError
                if j >= ll.w:
                    raise IndexError
                idx = (i * ll.w) + j
                return ll.items[idx]
            return OpSpec(getitem)

        @blue
        def __SETITEM__(m_arr: MetaArg, m_i: MetaArg, m_j: MetaArg,
                        m_v: MetaArg) -> OpSpec:
            def setitem(arr: ndarray, i: i32, j: i32, v: DTYPE) -> None:
                ll = arr.__ll__
                if i >= ll.h:
                    raise IndexError
                if j >= ll.w:
                    raise IndexError
                idx = (i * ll.w) + j
                ll.items[idx] = v
            return OpSpec(setitem)

        def print_flatten(self: ndarray) -> None:
            ll = self.__ll__
            i = 0
            while i < ll.h * ll.w:
                print(ll.items[i])
                i = i + 1

    return ndarray

def main() -> None:
    a = array2d[i32](2, 4)
    a[1, 2] = 6
    print(a[1, 2])
    a.print_flatten()
