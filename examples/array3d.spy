from operator import OpSpec, OpArg
from unsafe import gc_alloc, ptr

@blue.generic
def array3d(DTYPE):

    @struct
    class ArrayData:
        h: i32
        w: i32
        d: i32
        items: ptr[DTYPE]

    @typelift
    class ndarray:
        __ll__: ptr[ArrayData]

        # use this __new__ to allocate a buffer
        ## def __new__(h: i32, w: i32, d: i32) -> ndarray:
        ##     data = gc_alloc(ArrayData)(1)
        ##     data.h = h
        ##     data.w = w
        ##     data.d = d
        ##     data.items = gc_alloc(DTYPE)(h*w*d)
        ##     i = 0
        ##     while i < h*w*d:
        ##         data.items[i] = 0
        ##         i = i + 1
        ##     return ndarray.__lift__(data)

        # use this __new__ to create an array out of an existing buffer
        def __new__(buf: ptr[DTYPE], h: i32, w: i32, d: i32) -> ndarray:
            data = gc_alloc(ArrayData)(1)
            data.h = h
            data.w = w
            data.d = d
            data.items = buf
            return ndarray.__lift__(data)

        @blue
        def __GETITEM__(v_arr: OpArg, v_i: OpArg, v_j: OpArg, v_k: OpArg) -> OpSpec:
            def getitem(arr: ndarray, i: i32, j: i32, k: i32) -> DTYPE:
                ll = arr.__ll__
                if i >= ll.h:
                    raise IndexError
                if j >= ll.w:
                    raise IndexError
                if k >= ll.d:
                    raise IndexError
                idx = (i * ll.w * ll.d) + (j * ll.d) + k
                return ll.items[idx]
            return OpSpec(getitem)

        @blue
        def __SETITEM__(v_arr: OpArg, v_i: OpArg, v_j: OpArg, v_k: OpArg,
                        v_v: OpArg) -> OpSpec:
            def setitem(arr: ndarray, i: i32, j: i32, k: i32, v: DTYPE) -> None:
                ll = arr.__ll__
                if i >= ll.h:
                    raise IndexError
                if j >= ll.w:
                    raise IndexError
                if k >= ll.d:
                    raise IndexError
                idx = (i * ll.w * ll.d) + (j * ll.d) + k
                ll.items[idx] = v
            return OpSpec(setitem)

        def print_flatten(self: ndarray) -> None:
            ll = self.__ll__
            i = 0
            while i < ll.h * ll.w * ll.d:
                print(ll.items[i])
                i = i + 1

    return ndarray

def main() -> None:
    buf = gc_alloc(i32)(4*3*2)
    i = 0
    while i < 4*3*2:
        buf[i] = i
        i = i + 1
    a = array3d[i32](buf, 4, 3, 2)
    #a.print_flatten()
    print(a[2, 1, 0])
