from operator import OpSpec, MetaArg
from unsafe import gc_alloc, ptr

@struct
class RangeData:
    start: i32
    stop: i32
    step: i32


@typelift
class Range:
    __ll__: ptr[RangeData]

    def __new__(start: i32, stop: i32, step: i32) -> Range:
        #print(cls)
        ll = gc_alloc(RangeData)(1)
        ll.start = start
        ll.stop = stop
        ll.step = step
        return Range.__lift__(ll)

    def __getitem__(r: Range, i: i32) -> i32:
        ll = r.__ll__
        # I don't have 'or' yet ðŸ˜…
        if i < 0:
            raise IndexError('range object index out of range')
        if i >= (ll.stop - ll.start) / ll.step:
            raise IndexError('range object index out of range')

        return ll.start + i*ll.step

    @blue.metafunc
    def __getattr__(m_obj: MetaArg, m_attr: MetaArg) -> OpSpec:
        #print(v_obj)
        #print(m_attr)
        #print(m_attr.static_type)
        #print(m_attr.color)
        #print(m_attr.blueval)

        if m_attr.color != 'blue':
            raise ValueError('wrong color')
        attr = m_attr.blueval

        if attr == 'start':
            def getstart(r: Range, a: str) -> i32:
                return r.__ll__.start
            return OpSpec(getstart)

        elif attr == 'stop':
            def getstop(r: Range, a: str) -> i32:
                return r.__ll__.stop
            return OpSpec(getstop)

        return OpSpec.NULL


def main() -> None:
    r = Range(3, 12, 2)
    ## print(r)
    ## print(r.__ll__)
    print('testing __getitem__')
    print(r[0])
    print(r[1])
    print(r[2])
    print('')
    print('testing __getattr__')
    print(r.start)
    print(r.start)
    print(r.stop)
